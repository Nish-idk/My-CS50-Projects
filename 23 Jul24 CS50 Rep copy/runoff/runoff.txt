vote function updates the global 2D array preferences   BOOL
tabulate function updates the vote count in candidate struct    VOID
print_winner function prints out the winner if there is a candidate having > 50% votes and returns true. Else, return false.    BOOL
find_min finds the lowest number of votes to figure out who should be eliminated, be sure to consider candidates with eliminated = false
is_tie returns true if election is tie ie; if all candidates with eliminated = false have same votes
eliminate function changes eliminate to true of anyone in the race who has min votes

void tabulate(void)
{
    int k = 0;
    for (int i = 0; i < voter_count; i++)
    {
        for (int j = 0; j < candidate_count; j++)
        {
            if (!candidate[j].eliminated)
            {
                if (preferences[i][0] == j)
                {
                    candidate[j].votes++;
                }
            }
            if (candidate[j].eliminated)
            {
                for (int k = 1; k < candidate_count; k++)
                {
                    if (preferences[i][k] == j)
                    {
                        candidate[j].votes++;
                    }
                }
            }
        }
    }

}

OR

void tabulate(void)
{
    for (int i = 0; i < voter_count; i++)
    {
        if (!candidate[preferences[i][0]].eliminated)
        {
            candidate[preferences[i][0]].votes++;
        }
        if (candidate[preferences[i][0]].eliminated)
        {
            int k = 1;
            while (candidate[preferences[i][k]].eliminated)
            {
                k++;
            }
            candidate[preferences[i][k]].votes++;
        }
    }
}


// Return the minimum number of votes any remaining candidate has
int find_min(void)
{
    int lowest_votes;
    for (int i = 0, j = 1; i < candidate_count - 1; i++)
    {
        if (!candidates[i].eliminated || !candidates[j].eliminated)
        {
            int lowest_votes;
            if (candidates[i].votes > candidates[j].votes)
            {
                lowest_votes = candidates[j].votes;
            }
        }
    }
    return 0;
}

ORR
// Return the minimum number of votes any remaining candidate has
int find_min(void)
{
    int i;
    for (i = 0; i < candidate_count; i++)
    {
        if (!candidates[i].eliminated)
        {
            lowest_votes = candidates[i].votes;
            break;
        }
    }
    int j = i;
    while (!candidates[j].eliminated)
    {
        if (candidates[j].votes < lowest_votes)
        {
            lowest_votes = candidates[j].votes;
        }
        j++;
    }
    return 0;
}

ORR
// Return the minimum number of votes any remaining candidate has
int find_min(void)
{
    int lowest_votes = 0;
    int i;
    for (i = 0; i < candidate_count; i++)
    {
        if (!candidates[i].eliminated)
        {
            lowest_votes = candidates[i].votes;
            break;
        }
    }
    int j = i;
    for (j = i; j < candidate_count; j++)
    {
        if (!candidates[j].eliminated)
        {
            if (candidates[j].votes < lowest_votes)
            {
                lowest_votes = candidates[j].votes;
            }
        }
    }
    return lowest_votes;
}

tie happens when all candidates have same votes. hence lowers_value in the find_min function will be equal to these votes.
// Return true if the election is tied between all candidates, false otherwise
bool is_tie(int min)
{
    for (int i = 0; i < candidate_count; i++)
    {
        if (!candidates[i].eliminated)
        {
            if (candidates[i].votes != min)
            {
                return false;
            }
        }
    }
    return true;
}
